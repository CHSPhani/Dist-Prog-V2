 <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="300"></ColumnDefinition>
                <ColumnDefinition></ColumnDefinition>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition></RowDefinition>
                <RowDefinition></RowDefinition>
                <RowDefinition></RowDefinition>
                <RowDefinition></RowDefinition>
                <RowDefinition></RowDefinition>
                <RowDefinition></RowDefinition>
                <RowDefinition></RowDefinition>
                <RowDefinition></RowDefinition>
            </Grid.RowDefinitions>
            <Label Grid.Column="0" Grid.Row="0" Margin="20,10,10,10">Full Name</Label>
            <TextBox Grid.Column="1" Grid.Row="0" Margin="20,10,10,10" Text="{Binding UFName}"></TextBox>
            <Label Grid.Column="0" Grid.Row="1" Margin="20,10,10,10">Contact- Email</Label>
            <TextBox Grid.Column="1" Grid.Row="1" Margin="20,10,10,10" Text="{Binding UEMail}"></TextBox>
            <Label Grid.Column="0" Grid.Row="2" Margin="20,10,10,10">Contact- Phone</Label>
            <TextBox Grid.Column="1" Grid.Row="2" Margin="20,10,10,10" Text="{Binding UEPhone}"></TextBox>
            <Label Grid.Column="0" Grid.Row="3" Margin="20,10,10,10">Financial Options</Label>
            <ComboBox Grid.Column="1" Grid.Row="3" Margin="20,10,10,10" ItemsSource="{Binding FOptions}" SelectedItem="{Binding SFOption}"></ComboBox>
            <Label Grid.Column="0" Grid.Row="4" Margin="20,10,10,10">User Role</Label>
            <ComboBox Grid.Column="1" Grid.Row="4" Name="cbUR" Margin="20,10,10,10" DropDownClosed="CbUR_DropDownClosed"></ComboBox>

            <Label Grid.Column="0" Grid.Row="5" Margin="20,10,10,10">UserID</Label>
            <TextBox Grid.Column="1" Grid.Row="5" Margin="20,10,10,10" Text="{Binding UId}"></TextBox>

            <Label Grid.Column="0" Grid.Row="6" Margin="20,10,10,10">User Password</Label>
            <TextBox Grid.Column="1" Grid.Row="6" Margin="20,10,10,10" Text="{Binding UPwd}"></TextBox>

            <CheckBox Grid.Row="7" Grid.ColumnSpan="2" Content="Create New Role in case no suitable one found." Margin="10,10,10,10" HorizontalAlignment="Right"
                        IsChecked="{Binding CNRole}"></CheckBox>
        </Grid>
        


/// <summary>
        /// Here Iwant to present a screen for getting specific inputs
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void CbUR_DropDownClosed(object sender, EventArgs e)
        {
            string selectedUR = cbUR.SelectedItem.ToString();
            if(selectedUR.ToLower().Equals("consumer"))
            {
                ConsumerDet cDet = new ConsumerDet(dssFileParser);
                cDet.Show();
                cDet.Closing += CDet_Closing;
            }
            else if (selectedUR.ToLower().Equals("prosumer"))
            {
                ProsumerDet pDet = new ProsumerDet(dssFileParser);
                pDet.Show();
                pDet.Closing += PDet_Closing;
            }
        }

        ProsumerDataModel pdModel;
        private void PDet_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            pdModel = ((ProsumerDet)sender).PDModel;
        }

        ConsumerDataModel selCdModel;
        private void CDet_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            selCdModel = ((ConsumerDet)sender).CModel;
        }



System.InvalidOperationException
  HResult=0x80131509
  Message=In order to use one of the ServiceHost constructors that takes a service instance, the InstanceContextMode of the service must be set to InstanceContextMode.Single.  This can be configured via the ServiceBehaviorAttribute.  Otherwise, please consider using the ServiceHost constructors that take a Type argument.
  Source=System.ServiceModel
  StackTrace:
   at System.ServiceModel.ServiceBehaviorAttribute.ApplyInstancing(ServiceDescription description, ServiceHostBase serviceHostBase)
   at System.ServiceModel.ServiceBehaviorAttribute.System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(ServiceDescription description, ServiceHostBase serviceHostBase)
   at System.ServiceModel.Description.DispatcherBuilder.InitializeServiceHost(ServiceDescription description, ServiceHostBase serviceHost)
   at System.ServiceModel.ServiceHostBase.InitializeRuntime()
   at System.ServiceModel.ServiceHostBase.OnBeginOpen()
   at System.ServiceModel.ServiceHostBase.OnOpen(TimeSpan timeout)
   at System.ServiceModel.Channels.CommunicationObject.Open(TimeSpan timeout)
   at System.ServiceModel.Channels.CommunicationObject.Open()
   at Server.MainWindow.InvokingServices() in C:\WorkRelated-Offline\Dist_Prog_V2\ResMngNetwork\Server\MainWindow.xaml.cs:line 131
   at Server.MainWindow..ctor() in C:\WorkRelated-Offline\Dist_Prog_V2\ResMngNetwork\Server\MainWindow.xaml.cs:line 37


   //add UName to Users Node in KG. This could not be hardcoded, I will remove it.
            SemanticStructure curObj = AddNewUserRole.dbData.OwlData.RDFG.GetNodeDetails("Users");
            if (curObj != null)
            {
                string nName = AddNewUserRole.dbData.OwlData.RDFG.GetExactNodeName(curObj.SSName);
                List<string> outgoing = AddNewUserRole.dbData.OwlData.RDFG.GetEdgesForNode(nName);
                List<string> incoming = AddNewUserRole.dbData.OwlData.RDFG.GetIncomingEdgesForNode(nName);
                if (outgoing.Count != 0 & incoming.Count != 0)
                {

                    SemanticStructure sc = new SemanticStructure() { SSName = UName, SSType = SStrType.SubClassOf, XMLURI = "http://www.bristol.ac.uk/sles/v1/opendsst2" };

                    if (AddNewUserRole.dbData.OwlData.RDFG.AddNode(sc.ToString()))
                        AddNewUserRole.dbData.OwlData.RDFG.AddEntryToNODetail(sc.ToString(), sc);

                    SemanticStructure ss = AddNewUserRole.dbData.OwlData.RDFG.NODetails[nName];

                    string edKey = string.Format("{0}-{1}", sc.SSName, ss.SSName);
                    if (!AddNewUserRole.dbData.OwlData.RDFG.EdgeData.ContainsKey(edKey))
                        AddNewUserRole.dbData.OwlData.RDFG.EdgeData[edKey] = sc.SSType.ToString();

                    AddNewUserRole.dbData.OwlData.RDFG.AddEdge(string.Format("{0}:{1}", nName, SStrType.Class), UName);
                }

                outgoing = AddNewUserRole.dbData.OwlData.RDFG.GetEdgesForNode(nName);
                incoming = AddNewUserRole.dbData.OwlData.RDFG.GetIncomingEdgesForNode(nName);
            }



NodeMesaage nMessage = new NodeMesaage();
            nMessage.PCause = ProposalCause.NewOClass;
            nMessage.PTYpe = ProposalType.Transition;
            List<string> sItems = new List<string>();
            //nMessage.ProposedUser = p0;
            sItems.Add("Users");
            sItems.Add(UName);
            nMessage.DataItems = sItems;
            RaisePropose?.Invoke(this, new ProposeEventArgs() { NMessage = nMessage });
            return false;



Search Results 
Primary structure
	 Users
Class hierarchy

Data Properties
	 ID
	 Uname
	 address
Sub Classes
	 Consumer
	 Prosumer
	 SmartUser
Object Restrictions
	PaymentMethod

Intsnaces

 var values = (object[])parameter;
            
            if (values[0] != null)
                p1 = values[0].ToString();
            else
                p1 = string.Empty;

            if (values[1] != null)
                p2 = values[1].ToString();
            else
                p2 = string.Empty;

            if (values[2] != null)
                dbData = values[2] as DBData;
            else
                dbData = null;


public class InsertNewUser:ICommand
    {
        public event EventHandler CanExecuteChanged;

        public event RaiseProposeEventHandler RaiseProposal4;
        public bool CanExecute(object parameter)
        {
            return true;
        }

        public void Execute(object parameter)
        {
            var values = (object[])parameter;
            NodeMesaage nsm = (NodeMesaage)values[0];
            string p1 = nsm.DataItems[0];
            string p2 = nsm.DataItems[1];
            DBData dbData = (DBData)values[1];

            ProposeEventArgs pe = new ProposeEventArgs();
            pe.NMessage = nsm;

            RaiseProposal4?.Invoke(this, pe);   
        }
    }


                //dsn.InsertNUCommand.Execute(args);

public event ProposeResultEventHandler PRHandler;
        public event TransitResultEventHandler TRHandler;

PRHandler?.Invoke(this, new ProposeResultEventArgs() { PResult = true });
            PRHandler?.Invoke(this, new ProposeResultEventArgs() { PResult = true });
            TRHandler?.Invoke(this, new TransitResultEventArgs() { TResult = true });
            TRHandler?.Invoke(this, new TransitResultEventArgs() { TResult = false });



Message = "ChannelFactory does not support the contract IAddNewUserRole as it defines a callback contract with one or more operations.  Please consider using DuplexChannelFactory instead of ChannelFactory."


System.NullReferenceException
  HResult=0x80004003
  Message=Object reference not set to an instance of an object.
  Source=Server
  StackTrace:
   at Server.UploadIndividuals.AddNewUserRole.AddNewUserRole_PRHandler(Object sender, ProposeResultEventArgs e) in C:\WorkRelated-Offline\Dist_Prog_V2\ResMngNetwork\Server\UploadIndividuals\UploadIndividualsToRDFG.cs:line 429
   at Server.UploadIndividuals.AddNewUserRole.ProcessProposalResult(VoteType overAllType) in C:\WorkRelated-Offline\Dist_Prog_V2\ResMngNetwork\Server\UploadIndividuals\UploadIndividualsToRDFG.cs:line 456
   at Server.DSystem.DSNode.NetworkFunctions_CCEHandler(Object sender, EventArgs e) in C:\WorkRelated-Offline\Dist_Prog_V2\ResMngNetwork\Server\DSystem\DSNode.cs:line 1043
   at Server.DSystem.StartCCEventHandler.Invoke(Object sender, EventArgs e)
   at Server.DSystem.NetworkFunctions.Timer_Elapsed(Object sender, ElapsedEventArgs e) in C:\WorkRelated-Offline\Dist_Prog_V2\ResMngNetwork\Server\DSystem\SystemNetwork.cs:line 575
   at System.Timers.Timer.MyTimerCallback(Object state)

